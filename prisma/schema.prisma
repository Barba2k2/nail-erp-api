// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  PROFESSIONAL
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  RESCHEDULED
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_CANCELLATION
  APPOINTMENT_RESCHEDULED
  PASSWORD_RECOVERY
  CUSTOM_MESSAGE
}

enum NotificationChannel {
  EMAIL
  SMS
  SYSTEM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELED
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  name                 String
  role                 UserRole
  passwordResetToken   String?
  passwordResetExpires DateTime?
  phone                String?
  notes                String?
  preferences          Json?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  appointments           Appointment[]           @relation("UserAppointments")
  notifications          Notification[]
  notificationPreference NotificationPreference?
}

model Appointment {
  id             Int               @id @default(autoincrement())
  date           DateTime
  status         AppointmentStatus
  notes          String?
  clientFeedback String?
  rated          Boolean           @default(false)
  rating         Int?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  userId    Int
  user      User    @relation("UserAppointments", fields: [userId], references: [id])
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  notifications Notification[]
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  duration    Int
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
}

model TimeBlock {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessSettings {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int
  isOpen    Boolean  @default(true)
  openTime  String   @default("08:00")
  closeTime String   @default("18:00")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dayOfWeek])
}

model SpecialBusinessDay {
  id        Int      @id @default(autoincrement())
  date      DateTime
  isOpen    Boolean  @default(true)
  openTime  String?
  closeTime String?
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
}

model Notification {
  id            Int                 @id @default(autoincrement())
  userId        Int
  user          User                @relation(fields: [userId], references: [id])
  type          NotificationType
  channel       NotificationChannel
  status        NotificationStatus  @default(PENDING)
  title         String
  content       String
  scheduledFor  DateTime?
  sentAt        DateTime?
  appointmentId Int?
  appointment   Appointment?        @relation(fields: [appointmentId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model NotificationPreference {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  user                     User     @relation(fields: [userId], references: [id])
  enableEmailNotifications Boolean  @default(true)
  enableSmsNotifications   Boolean  @default(false)
  appointmentReminders     Boolean  @default(true)
  reminderTime             Int      @default(24)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model NotificationTemplate {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  name      String
  subject   String
  content   String
  isDefault Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([type, isDefault])
}

model BusinessInfo {
  id Int @id @default(autoincrement())

  // Informações básicas
  name        String // Nome do negócio
  slogan      String? // Slogan ou tagline
  description String? // Descrição do negócio
  logo        String? // URL do logo

  // Informações fiscais
  cnpj              String? // CNPJ
  stateRegistration String? // Inscrição Estadual
  cityRegistration  String? // Inscrição Municipal

  // Informações de contato
  email    String // Email principal
  phone    String // Telefone principal
  whatsapp String? // WhatsApp

  // Endereço
  address      String // Rua e número
  city         String // Cidade
  state        String // Estado
  zipCode      String // CEP
  neighborhood String? // Bairro
  complement   String? // Complemento

  // Redes sociais
  instagram String? // Instagram
  facebook  String? // Facebook
  tiktok    String? // TikTok
  youtube   String? // YouTube

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tenant    Tenant?
}

enum MessageTemplateType {
  EMAIL
  WHATSAPP
  BOTH
}

enum MessageTemplatePurpose {
  MARKETING
  BIRTHDAY
  LOYALTY
  ABANDONED_CART
  WELCOME
  PASSWORD_RECOVERY
  CUSTOM
}

model MessageTemplate {
  id          Int                    @id @default(autoincrement())
  name        String
  subject     String
  content     String
  type        MessageTemplateType
  purpose     MessageTemplatePurpose
  description String?
  isDefault   Boolean                @default(false)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  tenant      Tenant?                @relation(fields: [tenantId], references: [id])
  tenantId    Int?

  @@unique([purpose, isDefault])
}

model Tenant {
  id              Int               @id @default(autoincrement())
  subdomain       String            @unique
  businessId      Int               @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  business        BusinessInfo      @relation(fields: [businessId], references: [id])
  MessageTemplate MessageTemplate[]
}