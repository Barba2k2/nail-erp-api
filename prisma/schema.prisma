// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  name                 String
  role                 UserRole
  passwordResetToken   String?   // para recuperação de senha
  passwordResetExpires DateTime? // expiração do token
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  appointments         Appointment[] @relation("UserAppointments")
}

enum UserRole {
  CLIENT
  PROFESSIONAL
}

model Appointment {
  id         Int                @id @default(autoincrement())
  date       DateTime
  status     AppointmentStatus
  notes      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  userId     Int
  user       User               @relation("UserAppointments", fields: [userId], references: [id])
  serviceId  Int
  service    Service            @relation(fields: [serviceId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELED
  RESCHEDULED
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  duration     Int           // duração em minutos
  price        Float
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  appointments Appointment[]
}
